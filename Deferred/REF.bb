

Type DeferredReflections
	Field RefTexture 
	Field RefTexSize
	Field RefBoxRad
	Field RefBoxXS
	Field RefBoxYS
	Field RefBoxZS
	Field RefIntensity#
	Field x
	Field y
	Field z
	Field CullMesh
	Field ControlEnt
	
End Type


Function MakeFile(FileNameM$)
	NewINI = WriteFile(FileNameM$) 
	WriteString(NewINI,";Generated by xfe engine") 
	CloseFile( NewINI ) 
End Function


Function SaveReflectionsMap(DirPack$)
	
	MakeFile("REF.ini")
	INI_OpenFile2("REF.ini")
	
	For CR.DeferredReflections = Each DeferredReflections
		REFEntCount=REFEntCount+1
	Next
	
	INI_WriteValue("Entity", "count",REFEntCount)	
	
	REFEntCount=0
	
	For CR.DeferredReflections = Each DeferredReflections
		REFEntCount=REFEntCount+1
		
		INI_WriteValue("Ref_"+REFEntCount, "X",xEntityX(CR\ControlEnt))	
		INI_WriteValue("Ref_"+REFEntCount, "Y",xEntityY(CR\ControlEnt))	
		INI_WriteValue("Ref_"+REFEntCount, "Z",xEntityZ(CR\ControlEnt))
		
		INI_WriteValue("Ref_"+REFEntCount, "SizX",CR\RefBoxXS)	
		INI_WriteValue("Ref_"+REFEntCount, "SizY",CR\RefBoxYS)	
		INI_WriteValue("Ref_"+REFEntCount, "SizZ",CR\RefBoxZS)
		INI_WriteValue("Ref_"+REFEntCount, "Rad",CR\RefBoxRad)	
		INI_WriteValue("Ref_"+REFEntCount, "TexSize",CR\RefTexSize)	
		INI_WriteValue("Ref_"+REFEntCount, "Int",CR\RefIntensity#)	
		
	Next 
	INI_CloseFile%()
	xCopyFile ("REF.ini",MapsPatch$+DirPack$+"REF.ini")
	DeleteFile("REF.ini")
	
End Function


Function LoadRefMap(DirPack$)
	INI_OpenFile2(MapsPatch$+DirPack$+"REF.ini")
	
	REFEntCount = INI_ReadValue("Entity", "count", "0")
	For lft=1 To REFEntCount
		
		REFEntCountS=REFEntCountS+1
		
		xs#=INI_ReadValue("Ref_"+REFEntCountS, "SizX", "0")
		ys#=INI_ReadValue("Ref_"+REFEntCountS, "SizY", "0")
		zs#=INI_ReadValue("Ref_"+REFEntCountS, "SizZ", "0")
		
		xt#=INI_ReadValue("Ref_"+REFEntCountS, "X", "0")
		yt#=INI_ReadValue("Ref_"+REFEntCountS, "Y", "0")
		zt#=INI_ReadValue("Ref_"+REFEntCountS, "Z", "0")
		
		Rad#=INI_ReadValue("Ref_"+REFEntCountS, "Rad", "0")
		TexRefSize#=INI_ReadValue("Ref_"+REFEntCountS, "TexSize", "0")
		Intensity#=INI_ReadValue("Ref_"+REFEntCountS, "Int", "0")
		
		
		CubeReflectionsCreate(xt#,yt#,zt#,Rad,TexRefSize,xs,ys,zs,Intensity#)
	Next
	
	INI_CloseFile%()
End Function

Function DeleteAllCubeRef()
	For CR.DeferredReflections= Each DeferredReflections
		
		xFreeEntity CR\CullMesh
		xFreeEntity CR\ControlEnt
		xFreeTexture CR\RefTexture
		
		Delete cr
	Next
End Function


Function CubeReflectionsCreate(x#,y#,z#,Rad,TexRefSize=128,xs=50,ys=50,zs=50,Intensity#=0.5)
	CR.DeferredReflections = New DeferredReflections
	CR\RefTexture=xCreateTexture(TexRefSize,TexRefSize,1+128)
	CR\RefTexSize=TexRefSize
	
	CR\RefBoxRad=Rad
	
	CR\RefBoxXS=xs
	CR\RefBoxYS=ys
	CR\RefBoxZS=zs
	
	CR\x=x#
	CR\y=y#
	CR\z=z#
	
	CR\CullMesh = xCreateCube()
	
	xScaleEntity CR\CullMesh,Rad,Rad,Rad
	xEntityParent CR\CullMesh, LightPivot,1
	xSetEntityEffect 	CR\CullMesh, DeferredLightShader
	xSetEffectTechnique(CR\CullMesh, "DeferredCubemap")
	xSetEffectTexture 	CR\CullMesh, "tGBScreen",  DeferredAlbedo
	xSetEffectTexture 	CR\CullMesh, "tGBNormals", DeferredNormals
	xSetEffectTexture 	CR\CullMesh, "tBightles",  DeferredAdvMaterials 
	CR\ControlEnt=xCreateSphere(8)
	xEntityPickMode CR\ControlEnt,2
	xEntityTexture CR\ControlEnt,	CR\RefTexture
	xNameEntity CR\ControlEnt,"3"
	CR\RefIntensity#=Intensity#
	
	
	xPositionEntity CR\CullMesh,CR\x,CR\y,CR\z
	xPositionEntity CR\ControlEnt,CR\x,CR\y,CR\z
	RenderCubeReflection(CR\RefTexture, CR\CullMesh)
	xFreeEntity sdf
	Return CR\CullMesh
End Function


Function UpdateCubeRef(ControlEnt)
	For CR.DeferredReflections= Each DeferredReflections
		If CR\ControlEnt=ControlEnt
			RenderCubeReflection(CR\RefTexture, CR\ControlEnt)
		EndIf 
	Next
End Function





Function DrawCubeSize(ControlEnt)
	For CR.DeferredReflections= Each DeferredReflections
		If CR\ControlEnt=ControlEnt Or  CR\CullMesh=ControlEnt
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
		;Niz
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			
			
		;Boka
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)+CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)-CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)+CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			x=xProjectedX()
			y=xProjectedY()
			xCameraProject camera,xEntityX(CR\ControlEnt,1)-CR\RefBoxXS,xEntityY(CR\ControlEnt,1)-CR\RefBoxYS,xEntityZ(CR\ControlEnt,1)+CR\RefBoxZS
			xLine xProjectedX(),xProjectedY(),x,y
			
			
			
		EndIf 
	Next
End Function




Function UpdateAllCubeRef()
	For CR.DeferredReflections= Each DeferredReflections
		
		RenderCubeReflection(CR\RefTexture, CR\ControlEnt)
		
	Next
End Function

Function CubeRefGetT.DeferredReflections(ControlEnt)
	For CR.DeferredReflections= Each DeferredReflections
		If CR\ControlEnt=ControlEnt
			Return CR
		EndIf 
	Next
End Function






Function RenderCubeReflectionDef(Texture%, Entity)
	Local TexSiz% = xTextureWidth(Texture)
	;xCameraViewport DeferredCamera,0,0,TexSiz%,TexSiz%
	xCameraZoom DeferredCamera, 0
	xClsColor 255,255,255
	xCameraClsMode DeferredCamera,1,1
	
	xPositionEntity DeferredCamera,xEntityX(Entity,1),xEntityY(Entity,1),xEntityZ(Entity,1),1
	xCls 
	
	
	xSetCubeFace Texture,0
	xRotateEntity DeferredCamera,0,90,0
	SimpleRenderDeferred(Texture)
	
	xSetCubeFace Texture,1
	xRotateEntity DeferredCamera,0,0,0
	SimpleRenderDeferred(Texture)
	
	xSetCubeFace Texture,2
	xRotateEntity DeferredCamera,0,-90,0
	SimpleRenderDeferred(Texture)
	
	xSetCubeFace Texture,3
	xRotateEntity DeferredCamera,0,180,0
	SimpleRenderDeferred(Texture)
	
	xSetCubeFace Texture,4
	xRotateEntity DeferredCamera,-90,0,0
	SimpleRenderDeferred(Texture)
	
	xSetCubeFace Texture,5
	xRotateEntity DeferredCamera,90,0,0
	SimpleRenderDeferred(Texture)
	
	
	xCameraZoom DeferredCamera,1
	
	xCameraViewport DeferredCamera,0,0,ScreenW,ScreenH
 ;	xSaveBuffer(xTextureBuffer(Texture),"Cube.png")
End Function













Function RenderCubeReflection(Texture%, Entity)
	Local TexSiz% = xTextureWidth(Texture)
	xSetBuffer(xTextureBuffer(Texture))
	Cameraf=xCreateCamera()
	xCameraZoom Cameraf, 0
	xShowEntity Cameraf
	xHideEntity DeferredCamera 
	
	xPositionEntity Cameraf,xEntityX(Entity,1),xEntityY(Entity,1),xEntityZ(Entity,1),1
	xClsColor 255,255,255
	xCameraClsMode Cameraf,1,1
	xCameraViewport Cameraf,0,0,TexSiz,TexSiz
	
	
	
	xSetCubeFace Texture,0
	xRotateEntity Cameraf,0,90,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xSetCubeFace Texture,1
	xRotateEntity Cameraf,0,0,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xSetCubeFace Texture,2
	xRotateEntity Cameraf,0,-90,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xSetCubeFace Texture,3
	xRotateEntity Cameraf,0,180,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xSetCubeFace Texture,4
	xRotateEntity Cameraf,-90,0,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xSetCubeFace Texture,5
	xRotateEntity Cameraf,90,0,0
	xSetBuffer xTextureBuffer(Texture)
	xRenderWorld
	
	xShowEntity DeferredCamera
	xHideEntity Cameraf 
	
	xSetBuffer xBackBuffer()
	xFreeEntity Cameraf
	xClsColor 0,0,255
End Function


Function DeleteReflections()
	For CR.DeferredReflections = Each DeferredReflections
		xFreeTexture CR\RefTexture
		Delete cr
	Next
End Function

Function RenderDeferredRefCubemap()
	For CR.DeferredReflections = Each DeferredReflections
		xScaleEntity CR\CullMesh,CR\RefBoxRad,CR\RefBoxRad,CR\RefBoxRad
		xPositionEntity CR\CullMesh,xEntityX(CR\ControlEnt,1),xEntityY(CR\ControlEnt,1),xEntityZ(CR\ControlEnt,1),1
		
		
		CmeshRX#=xEntityX#(CR\ControlEnt,1)
		CmeshRY#=xEntityY#(CR\ControlEnt,1)
		CmeshRZ#=xEntityZ#(CR\ControlEnt,1)
		
		
		xSetEffectVector CR\CullMesh,"BoxMax",CmeshRX+CR\RefBoxXS,CmeshRY+CR\RefBoxYS,CmeshRZ+CR\RefBoxZS
		xSetEffectVector CR\CullMesh,"BoxMin",CmeshRX-CR\RefBoxXS,CmeshRY-CR\RefBoxYS,CmeshRZ-CR\RefBoxZS
		xSetEffectFloat CR\CullMesh, "BoxRad",CR\RefBoxRad
		xSetEffectFloat CR\CullMesh, "RefIntensity",CR\RefIntensity#
		
		
		
		xSetEffectVector CR\CullMesh,"CubemapPositionWS",xEntityX(CR\ControlEnt,1),xEntityY(CR\ControlEnt,1),xEntityZ(CR\ControlEnt,1)
		xSetEffectTexture 	CR\CullMesh, "envTexture", CR\RefTexture
	;	xSetEffectTechnique(CR\CullMesh, "DeferredCubemap")
	Next
End Function
;~IDEal Editor Parameters:
;~C#Blitz3D